# This file describes an application. You can have multiple applications
# in the same project.

# The name of this app. Must be unique within a project.
name: app

# The type of the application to build.
type: php:8.1

dependencies:
  php:
    composer/composer: '^2'

runtime:
  extensions:
    - redis
    # - blackfire # https://docs.platform.sh/integrations/observability/blackfire.

build:
  flavor: composer

variables:
  env:
    N_PREFIX: /app/.global

# The hooks that will be performed when the package is deployed.
hooks:
  build: |
    set -e

    # install a specific NodeJS version https://github.com/platformsh/snippets/
    #   -v requested version
    #   -y install Yarn
    curl -fsS https://raw.githubusercontent.com/platformsh/snippets/main/src/install_node.sh | { bash /dev/fd/3 -v 16.15 -y; } 3<&0

    # uncomment next line to build assets deploying
    npm install && npm run build

  deploy: |
    set -e
    php artisan optimize:clear
    php artisan migrate --force

# The relationships of the application with services or other applications.
# The left-hand side is the name of the relationship as it will be exposed
# to the application in the PLATFORM_RELATIONSHIPS variable. The right-hand
# side is in the form `<service name>:<endpoint name>`.
relationships:
  rediscache: "cache:redis"
  redissession: "cache:redis"

# The size of the persistent disk of the application (in MB).
disk: 512

# The mounts that will be performed when the package is deployed.
mounts:
  "storage/app/sqlite":
    source: service
    service: datastorage
    source_path: "sqlite"
  "storage/app/public":
    source: service
    service: datastorage
    source_path: "public"
  "storage/framework/views":
    source: service
    service: datastorage
    source_path: "views"
  "storage/framework/sessions":
    source: service
    service: datastorage
    source_path: "sessions"
  "storage/framework/cache":
    source: service
    service: datastorage
    source_path: "cache"
  "storage/logs":
    source: service
    service: datastorage
    source_path: "logs"
  "bootstrap/cache":
    source: service
    service: datastorage
    source_path: "cache"
  "/.config":
    source: service
    service: datastorage
    source_path: "config"

# The configuration of app when it is exposed to the web.
web:
  locations:
    "/":
      root: "public"
      index:
        - index.php
      allow: true
      passthru: "/index.php"
    "/storage":
      root: "storage/app/public"
      scripts: false

crons:
  # Run Laravel's scheduler every 5 minutes, which is often as crons can run on Professional plans.
  scheduler:
    spec: '*/5 * * * *'
    cmd: 'php artisan schedule:run'

# If you have an especially large queue, you may be better off using a worker.
# If so, comment out the `queue` cron entry and uncomment this instead. Note that
# Doing so requires a Medium plan or larger.
workers:
    queue:
        size: S
        commands:
            # To minimize leakage, the queue worker will stop every hour
            # and get restarted automatically.
            start: |
                php artisan schedule:work --max-time=3600

#source:
#  operations:
#    auto-update:
#      command: |
#        curl -fsS https://raw.githubusercontent.com/platformsh/source-operations/main/setup.sh | { bash /dev/fd/3 sop-autoupdate; } 3<&0
